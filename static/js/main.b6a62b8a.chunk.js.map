{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","MoviesList","movies","map","movie","imdbId","imgUrlPattern","imdbUrlPattern","imdbIdPattern","NewMovie","onAddMovie","useState","setTitle","setDescription","setImgUrl","setImdbUrl","setImdbId","errorForTitle","setErrorForTitle","errorForImgUrl","setErrorForImgUrl","errorForImdbUrl","setErrorForImdbUrl","errorForImdbId","setErrorForImdbId","isFormValid","test","onSubmit","e","preventDefault","htmlFor","id","type","classNames","placeholder","value","onChange","target","onBlur","name","cols","rows","form__button","disabled","App","state","moviesFromServer","addMovie","setState","this","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b6a62b8a.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\n\ntype Props = Movie;\n\nexport const MovieCard: React.FC<Props> = ({\n  title, description, imgUrl, imdbUrl,\n}) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n","import { useState } from 'react';\nimport classNames from 'classnames';\nimport './NewMovie.scss';\n\ntype Props = {\n  onAddMovie: (movie: Movie) => void;\n};\n\n// eslint-disable-next-line max-len\nconst imgUrlPattern = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[.!/\\\\\\w]*))?)$/;\nconst imdbUrlPattern = /\\w{3,9}:(?:\\/\\/)www\\.imdb\\.com\\/title\\/\\w{2}\\d{7}/;\nconst imdbIdPattern = /\\w{2}\\d{7}/;\n\nexport const NewMovie: React.FC<Props> = ({ onAddMovie }) => {\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [imgUrl, setImgUrl] = useState('');\n  const [imdbUrl, setImdbUrl] = useState('');\n  const [imdbId, setImdbId] = useState('');\n\n  const [errorForTitle, setErrorForTitle] = useState('');\n  const [errorForImgUrl, setErrorForImgUrl] = useState('');\n  const [errorForImdbUrl, setErrorForImdbUrl] = useState('');\n  const [errorForImdbId, setErrorForImdbId] = useState('');\n\n  const isFormValid = () => {\n    if (\n      title\n      && imdbUrl\n      && imdbUrl\n      && imdbId\n      && imgUrlPattern.test(imgUrl)\n      && imdbUrlPattern.test(imdbUrl)\n      && imdbIdPattern.test(imdbId)\n    ) {\n      return true;\n    }\n\n    return false;\n  };\n\n  const submitForm: React.FormEventHandler<HTMLFormElement> = (e) => {\n    e.preventDefault();\n\n    if (isFormValid()) {\n      onAddMovie({\n        title,\n        description,\n        imgUrl,\n        imdbUrl,\n        imdbId,\n      });\n\n      setTitle('');\n      setDescription('');\n      setImgUrl('');\n      setImdbUrl('');\n      setImdbId('');\n    }\n  };\n\n  const isValidImgUrl = () => {\n    if (!imgUrl || !imgUrlPattern.test(imgUrl)) {\n      return false;\n    }\n\n    return true;\n  };\n\n  const isValidImdbUrl = () => {\n    if (!imdbUrl || !imdbUrlPattern.test(imdbUrl)) {\n      return false;\n    }\n\n    return true;\n  };\n\n  const isValidImdbId = () => {\n    if (!imdbId || !imdbIdPattern.test(imdbId)) {\n      return false;\n    }\n\n    return true;\n  };\n\n  return (\n    <form\n      className=\"form\"\n      onSubmit={submitForm}\n    >\n      <label htmlFor=\"title\" className=\"form__label\">\n        <input\n          id=\"title\"\n          type=\"text\"\n          className={classNames(\n            'form__input',\n            { 'form__input-error': errorForTitle === '*Enter a title' },\n          )}\n          placeholder=\"Movie name\"\n          value={title}\n          onChange={(e) => {\n            setTitle(e.target.value);\n            setErrorForTitle('');\n          }}\n          onBlur={() => (\n            !title && setErrorForTitle('*Enter a title')\n          )}\n        />\n        <span className=\"form__span\">\n          {errorForTitle}\n        </span>\n      </label>\n\n      <label htmlFor=\"description\" className=\"form__label\">\n        <textarea\n          id=\"description\"\n          name=\"description\"\n          className=\"form__textarea\"\n          placeholder=\"Movie description (optional)\"\n          value={description}\n          cols={55}\n          rows={5}\n          onChange={(e) => {\n            setDescription(e.target.value);\n          }}\n        />\n      </label>\n\n      <label htmlFor=\"imgUrl\" className=\"form__label\">\n        <input\n          id=\"imgUrl\"\n          type=\"text\"\n          className={classNames(\n            'form__input',\n            {\n              'form__input-error': errorForImgUrl\n                === '*Enter a valid image URL',\n            },\n          )}\n          placeholder=\"Image URL\"\n          value={imgUrl}\n          onChange={(e) => {\n            setImgUrl(e.target.value);\n            setErrorForImgUrl('');\n          }}\n          onBlur={() => (\n            !isValidImgUrl() && setErrorForImgUrl('*Enter a valid image URL')\n          )}\n        />\n        <span className=\"form__span\">\n          {errorForImgUrl}\n        </span>\n      </label>\n\n      <label htmlFor=\"imdbUrl\" className=\"form__label\">\n        <input\n          id=\"imdbUrl\"\n          type=\"text\"\n          className={classNames(\n            'form__input',\n            {\n              'form__input-error': errorForImdbUrl\n                === '*Enter a valid imdb URL',\n            },\n          )}\n          placeholder=\"Imdb URL\"\n          value={imdbUrl}\n          onChange={(e) => {\n            setImdbUrl(e.target.value);\n            setErrorForImdbUrl('');\n          }}\n          onBlur={() => (\n            !isValidImdbUrl() && setErrorForImdbUrl('*Enter a valid imdb URL')\n          )}\n        />\n        <span className=\"form__span\">\n          {errorForImdbUrl}\n        </span>\n      </label>\n\n      <label htmlFor=\"imdbId\" className=\"form__label\">\n        <input\n          id=\"imdbId\"\n          type=\"text\"\n          className={classNames(\n            'form__input',\n            {\n              'form__input-error': errorForImdbId\n                === '*Enter a valid imdb ID',\n            },\n          )}\n          placeholder=\"Imdb ID\"\n          value={imdbId}\n          onChange={(e) => {\n            setImdbId(e.target.value);\n            setErrorForImdbId('');\n          }}\n          onBlur={() => (\n            !isValidImdbId() && setErrorForImdbId('*Enter a valid imdb ID')\n          )}\n        />\n        <span className=\"form__span\">\n          {errorForImdbId}\n        </span>\n      </label>\n\n      <button\n        type=\"submit\"\n        className={classNames(\n          'form__button--not-active',\n          { form__button: isFormValid() },\n        )}\n        disabled={!isFormValid()}\n      >\n        Add a new movie\n      </button>\n    </form>\n  );\n};\n","import React from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\ninterface State {\n  movies: Movie[];\n}\n\nexport class App extends React.Component<{}, State> {\n  state: State = {\n    movies: moviesFromServer,\n  };\n\n  addMovie = (movie: Movie) => {\n    this.setState(state => ({\n      movies: [...state.movies, movie],\n    }));\n  };\n\n  render() {\n    const { movies } = this.state;\n\n    return (\n      <div className=\"page\">\n        <div className=\"page-content\">\n          <MoviesList movies={movies} />\n        </div>\n        <div className=\"sidebar\">\n          <NewMovie\n            onAddMovie={this.addMovie}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}